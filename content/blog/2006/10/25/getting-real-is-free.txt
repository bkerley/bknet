--- 
slug: getting-real-is-free
updated_at: 2008-03-02 18:02:33 -05:00
title: "\"Getting Real\" is free"
tags: book programming school lisp
id: 112
excerpt: 
filter: 
- markdown
blog_post: true
layout: post
created_at: 2006-10-25 23:00:11 -04:00
--- 
So I've been waiting for some time to actually read "Getting Real," a book about webapp development (and producing products in general) from [37signals](http://37signals.com/).  Today they released a free HTML version for online browsin', and announced the availability of a paperback version.  It's fairly short (I read it in a couple hours), but covers a lot of ground about their particular brand of agile software development. [http://gettingreal.37signals.com/](http://gettingreal.37signals.com/)

Basically, here's what I'm taking away from it:
* release early and often
* pay attention to what users are saying, but resist complication
* as usual, less code is better code; no code is the best code

Unrelated, but I **super-slammed** the LISP assignment due tomorrow in like 45 minutes.  Nesting functions and using recursion just seems to work right once you get in the right frame of mind.  My biggest guff with it is the big pile of parens you get at the end when you're wrapping up all your nested functions:

              (list (car rev))
            )
          )
        )
      )
    )

Is there a functional language that doesn't end up like that, or is this as endemic to the genre as bloated syntax in "enterprise" languages (like C# and Java)?
